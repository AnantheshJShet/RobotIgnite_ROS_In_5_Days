{"filter":false,"title":"move_drone.py","tooltip":"/exercise_4p6/src/move_drone.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":32,"column":0},"end":{"row":32,"column":1},"action":"insert","lines":["m"],"id":434}],[{"start":{"row":32,"column":1},"end":{"row":32,"column":2},"action":"insert","lines":["o"],"id":435}],[{"start":{"row":32,"column":2},"end":{"row":32,"column":3},"action":"insert","lines":["v"],"id":436}],[{"start":{"row":32,"column":3},"end":{"row":32,"column":4},"action":"insert","lines":["e"],"id":437}],[{"start":{"row":32,"column":4},"end":{"row":32,"column":5},"action":"insert","lines":["_"],"id":438}],[{"start":{"row":32,"column":5},"end":{"row":32,"column":6},"action":"insert","lines":["m"],"id":439}],[{"start":{"row":32,"column":6},"end":{"row":32,"column":7},"action":"insert","lines":["s"],"id":440}],[{"start":{"row":32,"column":7},"end":{"row":32,"column":8},"action":"insert","lines":["g"],"id":441}],[{"start":{"row":32,"column":8},"end":{"row":32,"column":9},"action":"insert","lines":[" "],"id":442}],[{"start":{"row":32,"column":9},"end":{"row":32,"column":10},"action":"insert","lines":["="],"id":443},{"start":{"row":32,"column":10},"end":{"row":32,"column":11},"action":"insert","lines":[" "]}],[{"start":{"row":32,"column":11},"end":{"row":32,"column":12},"action":"insert","lines":["T"],"id":444}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"insert","lines":["w"],"id":445}],[{"start":{"row":32,"column":13},"end":{"row":32,"column":14},"action":"insert","lines":["i"],"id":446}],[{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"insert","lines":["s"],"id":447}],[{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"insert","lines":["t"],"id":448}],[{"start":{"row":32,"column":16},"end":{"row":32,"column":18},"action":"insert","lines":["()"],"id":449}],[{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"insert","lines":[" "],"id":450}],[{"start":{"row":32,"column":19},"end":{"row":32,"column":56},"action":"insert","lines":["#Create the message to move the drone"],"id":451}],[{"start":{"row":32,"column":56},"end":{"row":36,"column":56},"action":"insert","lines":["","takeoff = rospy.Publisher('/drone/takeoff', Empty, queue_size=1) #Create a Publisher to takeoff the drone","takeoff_msg = Empty() #Create the message to takeoff the drone","land = rospy.Publisher('/drone/land', Empty, queue_size=1) #Create a Publisher to land the drone","land_msg = Empty() #Create the message to land the drone"],"id":452}],[{"start":{"row":33,"column":7},"end":{"row":33,"column":8},"action":"insert","lines":["_"],"id":453}],[{"start":{"row":33,"column":8},"end":{"row":33,"column":9},"action":"insert","lines":["p"],"id":454}],[{"start":{"row":33,"column":9},"end":{"row":33,"column":10},"action":"insert","lines":["u"],"id":455}],[{"start":{"row":33,"column":10},"end":{"row":33,"column":11},"action":"insert","lines":["b"],"id":456}],[{"start":{"row":35,"column":4},"end":{"row":35,"column":5},"action":"insert","lines":["_"],"id":457}],[{"start":{"row":35,"column":5},"end":{"row":35,"column":6},"action":"insert","lines":["p"],"id":458}],[{"start":{"row":35,"column":6},"end":{"row":35,"column":7},"action":"insert","lines":["u"],"id":459}],[{"start":{"row":35,"column":7},"end":{"row":35,"column":8},"action":"insert","lines":["b"],"id":460}],[{"start":{"row":36,"column":56},"end":{"row":41,"column":58},"action":"insert","lines":["","","# waits until the action server is up and running","rospy.loginfo('Waiting for action Server '+action_server_name)","client.wait_for_server()","rospy.loginfo('Action Server Found...'+action_server_name)"],"id":461}],[{"start":{"row":41,"column":58},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":462}],[{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":463}],[{"start":{"row":43,"column":0},"end":{"row":43,"column":1},"action":"insert","lines":["A"],"id":464}],[{"start":{"row":43,"column":1},"end":{"row":43,"column":2},"action":"insert","lines":["r"],"id":465}],[{"start":{"row":43,"column":2},"end":{"row":43,"column":3},"action":"insert","lines":["d"],"id":466}],[{"start":{"row":43,"column":3},"end":{"row":43,"column":4},"action":"insert","lines":["r"],"id":467}],[{"start":{"row":43,"column":4},"end":{"row":43,"column":5},"action":"insert","lines":["o"],"id":468}],[{"start":{"row":43,"column":5},"end":{"row":43,"column":6},"action":"insert","lines":["n"],"id":469}],[{"start":{"row":43,"column":6},"end":{"row":43,"column":7},"action":"insert","lines":["e"],"id":470}],[{"start":{"row":43,"column":7},"end":{"row":43,"column":8},"action":"insert","lines":["G"],"id":471}],[{"start":{"row":43,"column":8},"end":{"row":43,"column":9},"action":"insert","lines":["o"],"id":472}],[{"start":{"row":43,"column":0},"end":{"row":43,"column":9},"action":"remove","lines":["ArdroneGo"],"id":473},{"start":{"row":43,"column":0},"end":{"row":43,"column":11},"action":"insert","lines":["ArdroneGoal"]}],[{"start":{"row":43,"column":11},"end":{"row":43,"column":13},"action":"insert","lines":["()"],"id":474}],[{"start":{"row":43,"column":0},"end":{"row":43,"column":1},"action":"insert","lines":["g"],"id":475}],[{"start":{"row":43,"column":1},"end":{"row":43,"column":2},"action":"insert","lines":["o"],"id":476}],[{"start":{"row":43,"column":2},"end":{"row":43,"column":3},"action":"insert","lines":["a"],"id":477}],[{"start":{"row":43,"column":3},"end":{"row":43,"column":4},"action":"insert","lines":["l"],"id":478}],[{"start":{"row":43,"column":4},"end":{"row":43,"column":5},"action":"insert","lines":[" "],"id":479}],[{"start":{"row":43,"column":5},"end":{"row":43,"column":6},"action":"insert","lines":["="],"id":480}],[{"start":{"row":43,"column":6},"end":{"row":43,"column":7},"action":"insert","lines":[" "],"id":481}],[{"start":{"row":43,"column":20},"end":{"row":44,"column":0},"action":"insert","lines":["",""],"id":482}],[{"start":{"row":44,"column":0},"end":{"row":44,"column":1},"action":"insert","lines":["g"],"id":483}],[{"start":{"row":44,"column":1},"end":{"row":44,"column":2},"action":"insert","lines":["o"],"id":484}],[{"start":{"row":44,"column":2},"end":{"row":44,"column":3},"action":"insert","lines":["a"],"id":485}],[{"start":{"row":44,"column":3},"end":{"row":44,"column":4},"action":"insert","lines":["l"],"id":486}],[{"start":{"row":44,"column":4},"end":{"row":44,"column":5},"action":"insert","lines":["."],"id":487}],[{"start":{"row":44,"column":5},"end":{"row":44,"column":6},"action":"insert","lines":["n"],"id":488}],[{"start":{"row":44,"column":6},"end":{"row":44,"column":7},"action":"insert","lines":["s"],"id":489}],[{"start":{"row":44,"column":7},"end":{"row":44,"column":8},"action":"insert","lines":["e"],"id":490}],[{"start":{"row":44,"column":7},"end":{"row":44,"column":8},"action":"remove","lines":["e"],"id":491}],[{"start":{"row":44,"column":7},"end":{"row":44,"column":8},"action":"insert","lines":["e"],"id":492}],[{"start":{"row":44,"column":8},"end":{"row":44,"column":9},"action":"insert","lines":["c"],"id":493}],[{"start":{"row":44,"column":9},"end":{"row":44,"column":10},"action":"insert","lines":["o"],"id":494}],[{"start":{"row":44,"column":10},"end":{"row":44,"column":11},"action":"insert","lines":["n"],"id":495}],[{"start":{"row":44,"column":11},"end":{"row":44,"column":12},"action":"insert","lines":["d"],"id":496}],[{"start":{"row":44,"column":12},"end":{"row":44,"column":13},"action":"insert","lines":["s"],"id":497}],[{"start":{"row":44,"column":13},"end":{"row":44,"column":14},"action":"insert","lines":[" "],"id":498}],[{"start":{"row":44,"column":14},"end":{"row":44,"column":15},"action":"insert","lines":["="],"id":499}],[{"start":{"row":44,"column":15},"end":{"row":44,"column":16},"action":"insert","lines":[" "],"id":500}],[{"start":{"row":44,"column":16},"end":{"row":44,"column":17},"action":"insert","lines":["1"],"id":501}],[{"start":{"row":44,"column":17},"end":{"row":44,"column":18},"action":"insert","lines":["0"],"id":502}],[{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":503}],[{"start":{"row":43,"column":0},"end":{"row":43,"column":45},"action":"insert","lines":["# creates a goal to send to the action server"],"id":504}],[{"start":{"row":45,"column":18},"end":{"row":45,"column":19},"action":"insert","lines":[" "],"id":505}],[{"start":{"row":45,"column":19},"end":{"row":45,"column":62},"action":"insert","lines":["# indicates, take pictures along 10 seconds"],"id":506}],[{"start":{"row":45,"column":62},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":507}],[{"start":{"row":46,"column":0},"end":{"row":46,"column":53},"action":"insert","lines":["client.send_goal(goal, feedback_cb=feedback_callback)"],"id":508}],[{"start":{"row":46,"column":53},"end":{"row":57,"column":49},"action":"insert","lines":["","","","# You can access the SimpleAction Variable \"simple_state\", that will be 1 if active, and 2 when finished.","#Its a variable, better use a function like get_state.","#state = client.simple_state","# state_result will give the FINAL STATE. Will be 1 when Active, and 2 if NO ERROR, 3 If Any Warning, and 3 if ERROR","state_result = client.get_state()","","rate = rospy.Rate(1)","","rospy.loginfo(\"state_result: \"+str(state_result))"],"id":509}],[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["",""],"id":510}],[{"start":{"row":52,"column":33},"end":{"row":53,"column":0},"action":"remove","lines":["",""],"id":511}],[{"start":{"row":53,"column":20},"end":{"row":54,"column":0},"action":"remove","lines":["",""],"id":512}],[{"start":{"row":54,"column":49},"end":{"row":62,"column":10},"action":"insert","lines":["","","#We takeoff the drone during the first 3 seconds","i=0","while not i == 3:","    takeoff.publish(takeoff_msg)","    rospy.loginfo('Taking off...')","    time.sleep(1)","    i += 1"],"id":513}],[{"start":{"row":59,"column":11},"end":{"row":59,"column":12},"action":"insert","lines":["_"],"id":514}],[{"start":{"row":59,"column":12},"end":{"row":59,"column":13},"action":"insert","lines":["p"],"id":515}],[{"start":{"row":59,"column":13},"end":{"row":59,"column":14},"action":"insert","lines":["u"],"id":516}],[{"start":{"row":59,"column":14},"end":{"row":59,"column":15},"action":"insert","lines":["b"],"id":517}],[{"start":{"row":62,"column":10},"end":{"row":72,"column":53},"action":"insert","lines":["","","#We move the drone in a circle wile the state of the Action is not DONE yet","while state_result < DONE:","    move_msg.linear.x = 1","    move_msg.angular.z = 1","    move.publish(move_msg)","    rate.sleep()","    state_result = client.get_state()","    rospy.loginfo('Moving around...')","    rospy.loginfo(\"state_result: \"+str(state_result))"],"id":518}],[{"start":{"row":71,"column":37},"end":{"row":72,"column":53},"action":"remove","lines":["","    rospy.loginfo(\"state_result: \"+str(state_result))"],"id":519}],[{"start":{"row":68,"column":8},"end":{"row":68,"column":9},"action":"insert","lines":["_"],"id":520}],[{"start":{"row":68,"column":9},"end":{"row":68,"column":10},"action":"insert","lines":["p"],"id":521}],[{"start":{"row":68,"column":10},"end":{"row":68,"column":11},"action":"insert","lines":["u"],"id":522}],[{"start":{"row":68,"column":11},"end":{"row":68,"column":12},"action":"insert","lines":["b"],"id":523}],[{"start":{"row":71,"column":37},"end":{"row":88,"column":10},"action":"insert","lines":["","    ","rospy.loginfo(\"[Result] State: \"+str(state_result))","if state_result == ERROR:","    rospy.logerr(\"Something went wrong in the Server Side\")","if state_result == WARN:","    rospy.logwarn(\"There is a warning in the Server Side\")","","# We land the drone when the action is finished","i=0","while not i == 3:","    move_msg.linear.x = 0","    move_msg.angular.z = 0","    move.publish(move_msg)","    land.publish(land_msg)","    rospy.loginfo('Landing...')","    time.sleep(1)","    i += 1"],"id":524}],[{"start":{"row":27,"column":17},"end":{"row":27,"column":36},"action":"remove","lines":["drone_action_client"],"id":525},{"start":{"row":27,"column":17},"end":{"row":27,"column":36},"action":"insert","lines":["drone_action_client"]}],[{"start":{"row":84,"column":8},"end":{"row":84,"column":9},"action":"insert","lines":["_"],"id":526}],[{"start":{"row":84,"column":9},"end":{"row":84,"column":10},"action":"insert","lines":["p"],"id":527}],[{"start":{"row":84,"column":10},"end":{"row":84,"column":11},"action":"insert","lines":["u"],"id":528}],[{"start":{"row":84,"column":11},"end":{"row":84,"column":12},"action":"insert","lines":["b"],"id":529}],[{"start":{"row":85,"column":8},"end":{"row":85,"column":9},"action":"insert","lines":["_"],"id":530}],[{"start":{"row":85,"column":9},"end":{"row":85,"column":10},"action":"insert","lines":["p"],"id":531}],[{"start":{"row":85,"column":10},"end":{"row":85,"column":11},"action":"insert","lines":["u"],"id":532}],[{"start":{"row":85,"column":11},"end":{"row":85,"column":12},"action":"insert","lines":["b"],"id":533}],[{"start":{"row":0,"column":0},"end":{"row":88,"column":10},"action":"remove","lines":["#! usr/bin/env python","","import rospy","import time","import actionlib","from ardrone_as.msg import ArdroneAction, ArdroneGoal, ArdroneResult, ArdroneFeedback","from geometry_msgs.msg import Twist","from std_msgs.msg import Empty","","# We create some constants with the corresponing vaules from the SimpleGoalState class","PENDING = 0","ACTIVE = 1","DONE = 2","WARN = 3","ERROR = 4","","nImage = 1","","# definition of the feedback callback. This will be called when feedback","# is received from the action server","# it just prints a message indicating a new message has been received","def feedback_callback(feedback):","    global nImage","    print('[Feedback] image n.%d received'%nImage)","    nImage += 1","    ","# Initializes the action client node","rospy.init_node('drone_action_client')","","action_server_name = '/ardrone_action_server'","client = actionlib.SimpleActionClient(action_server_name, ArdroneAction)","move_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1) #Create a Publisher to move the drone","move_msg = Twist() #Create the message to move the drone","takeoff_pub = rospy.Publisher('/drone/takeoff', Empty, queue_size=1) #Create a Publisher to takeoff the drone","takeoff_msg = Empty() #Create the message to takeoff the drone","land_pub = rospy.Publisher('/drone/land', Empty, queue_size=1) #Create a Publisher to land the drone","land_msg = Empty() #Create the message to land the drone","","# waits until the action server is up and running","rospy.loginfo('Waiting for action Server '+action_server_name)","client.wait_for_server()","rospy.loginfo('Action Server Found...'+action_server_name)","","# creates a goal to send to the action server","goal = ArdroneGoal()","goal.nseconds = 10 # indicates, take pictures along 10 seconds","client.send_goal(goal, feedback_cb=feedback_callback)","","# You can access the SimpleAction Variable \"simple_state\", that will be 1 if active, and 2 when finished.","#Its a variable, better use a function like get_state.","#state = client.simple_state","# state_result will give the FINAL STATE. Will be 1 when Active, and 2 if NO ERROR, 3 If Any Warning, and 3 if ERROR","state_result = client.get_state()","rate = rospy.Rate(1)","rospy.loginfo(\"state_result: \"+str(state_result))","","#We takeoff the drone during the first 3 seconds","i=0","while not i == 3:","    takeoff_pub.publish(takeoff_msg)","    rospy.loginfo('Taking off...')","    time.sleep(1)","    i += 1","","#We move the drone in a circle wile the state of the Action is not DONE yet","while state_result < DONE:","    move_msg.linear.x = 1","    move_msg.angular.z = 1","    move_pub.publish(move_msg)","    rate.sleep()","    state_result = client.get_state()","    rospy.loginfo('Moving around...')","    ","rospy.loginfo(\"[Result] State: \"+str(state_result))","if state_result == ERROR:","    rospy.logerr(\"Something went wrong in the Server Side\")","if state_result == WARN:","    rospy.logwarn(\"There is a warning in the Server Side\")","","# We land the drone when the action is finished","i=0","while not i == 3:","    move_msg.linear.x = 0","    move_msg.angular.z = 0","    move_pub.publish(move_msg)","    land_pub.publish(land_msg)","    rospy.loginfo('Landing...')","    time.sleep(1)","    i += 1"],"id":534},{"start":{"row":0,"column":0},"end":{"row":94,"column":10},"action":"insert","lines":["#! /usr/bin/env python","","import rospy","import time","import actionlib","from ardrone_as.msg import ArdroneAction, ArdroneGoal, ArdroneResult, ArdroneFeedback","from geometry_msgs.msg import Twist","from std_msgs.msg import Empty","","# We create some constants with the corresponing vaules from the SimpleGoalState class","PENDING = 0","ACTIVE = 1","DONE = 2","WARN = 3","ERROR = 4","","nImage = 1","","# definition of the feedback callback. This will be called when feedback","# is received from the action server","# it just prints a message indicating a new message has been received","def feedback_callback(feedback):","","    global nImage","    print('[Feedback] image n.%d received'%nImage)","    nImage += 1","","# initializes the action client node","rospy.init_node('drone_action_client')","","action_server_name = '/ardrone_action_server'","client = actionlib.SimpleActionClient(action_server_name, ArdroneAction)","move = rospy.Publisher('/cmd_vel', Twist, queue_size=1) #Create a Publisher to move the drone","move_msg = Twist() #Create the message to move the drone","takeoff = rospy.Publisher('/drone/takeoff', Empty, queue_size=1) #Create a Publisher to takeoff the drone","takeoff_msg = Empty() #Create the message to takeoff the drone","land = rospy.Publisher('/drone/land', Empty, queue_size=1) #Create a Publisher to land the drone","land_msg = Empty() #Create the message to land the drone","","# waits until the action server is up and running","rospy.loginfo('Waiting for action Server '+action_server_name)","client.wait_for_server()","rospy.loginfo('Action Server Found...'+action_server_name)","","# creates a goal to send to the action server","goal = ArdroneGoal()","goal.nseconds = 10 # indicates, take pictures along 10 seconds","","client.send_goal(goal, feedback_cb=feedback_callback)","","","# You can access the SimpleAction Variable \"simple_state\", that will be 1 if active, and 2 when finished.","#Its a variable, better use a function like get_state.","#state = client.simple_state","# state_result will give the FINAL STATE. Will be 1 when Active, and 2 if NO ERROR, 3 If Any Warning, and 3 if ERROR","state_result = client.get_state()","","rate = rospy.Rate(1)","","rospy.loginfo(\"state_result: \"+str(state_result))","","#We takeoff the drone during the first 3 seconds","i=0","while not i == 3:","    takeoff.publish(takeoff_msg)","    rospy.loginfo('Taking off...')","    time.sleep(1)","    i += 1","","#We move the drone in a circle wile the state of the Action is not DONE yet","while state_result < DONE:","    move_msg.linear.x = 1","    move_msg.angular.z = 1","    move.publish(move_msg)","    rate.sleep()","    state_result = client.get_state()","    rospy.loginfo('Moving around...')","    rospy.loginfo(\"state_result: \"+str(state_result))","    ","rospy.loginfo(\"[Result] State: \"+str(state_result))","if state_result == ERROR:","    rospy.logerr(\"Something went wrong in the Server Side\")","if state_result == WARN:","    rospy.logwarn(\"There is a warning in the Server Side\")","","# We land the drone when the action is finished","i=0","while not i == 3:","    move_msg.linear.x = 0","    move_msg.angular.z = 0","    move.publish(move_msg)","    land.publish(land_msg)","    rospy.loginfo('Landing...')","    time.sleep(1)","    i += 1"]}]]},"ace":{"folds":[],"scrolltop":1134.5,"scrollleft":0,"selection":{"start":{"row":94,"column":10},"end":{"row":94,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":80,"state":"start","mode":"ace/mode/python"}},"timestamp":1538477681757,"hash":"4aef64d5c6f284ecd724d5c376147b685a08b106"}